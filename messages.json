{
    "generateKey": {
        "requestCode": "A0",
        "responseCode": "A1",
        "requestPattern": "mode:1/string, keyType:3/string, keySchemeLmk:1/string, deriveKeyMode:deriveKeyModeLen/string, dukptMasterKeyType:dukptMasterKeyTypeLen/string, dukptMasterKey:dukptMasterKeyLen/string, ksn:ksnLength/string, zkaMasterKeyType:zkaMasterKeyTypeLength/string, zkaMasterKey:zkaMasterKeyLength/string, zkaOption:zkaOptionLength/string, zkaRndi:zkaRndiLength/string, delimiter:delimiterLength/string, keyZmkTmkFlag:keyZmkTmkFlagLength/string, keyZmkTmk:keyZmkTmkLength/string, keySchemeZmkTmk:keySchemeZmkTmkLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string, tr31BlockData:tr31BlockDataLen/string",
        "responsePattern": "errorCode:2/string, key:33/string, rest/binary",
        "customResponseError": {
            "10": "ZMK or TMK Parity error"
        }
    },
    "formKeyFromComponents": {
        "requestCode": "A4",
        "responseCode": "A5",
        "requestPattern": "numberOfComponents:1/string, keyType:3/string, keySchemeLmk:1/string, keyComponents:keyComponentsLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, key:33/string, keyCheckValue:6/string",
        "customResponseError": {
            "03": "Invalid number of components",
            "10": "Component parity error"
        }
    },
    "importKey": {
        "requestCode": "A6",
        "responseCode": "A7",
        "requestPattern": "keyType:3/string, zmk:33/string, key:33/string, keyScheme:1/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, key:33/string, keyCheckValue:6/string",
        "warnings": ["01"],
        "customResponseError": {
            "10": "ZMK Parity error"
        }
    },
    "exportKey": {
        "requestCode": "A8",
        "responseCode": "A9",
        "requestPattern": "keyType:3/string, zmk:33/string, key:33/string, keyScheme:1/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, key:33/string, keyCheckValue:6/string",
        "customResponseError": {
            "10": "ZMK or TMK Parity error",
            "11": "Key parity error"
        }
    },
    "echo": {
        "requestCode": "B2",
        "responseCode": "B3",
        "requestPattern": "length:4/string-left-zero, data:length/string-left-zero",
        "responsePattern": "errorCode:2/string, data:4/string"
    },
    "translatePinLmkLmk": {
        "requestCode": "BG",
        "responseCode": "BH",
        "requestPattern": "account:12/string, pin:pinLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary"
    },
    "generateOffsetIbm": {
        "requestCode": "BK",
        "responseCode": "BL",
        "requestPattern": "keyType:3/string, key:33/string, pvk:pvkLength/string, pinBlock:16/string, pinBlockFormat:2/string, checkLength:2/string-left-zero, pan:12/string, decimalisationTable:16/string, pinValidationData:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, offset:12/string",
        "warnings": ["02"],
        "customResponseError": {
            "03": "Excluded PIN count incorrect",
            "10": "TPK or ZPK parity error",
            "11": "PVK parity error",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "eraseKeyChangeStorage": {
        "requestCode": "BS",
        "responseCode": "BT",
        "requestPattern": "\"\"",
        "responsePattern": "errorCode:2/string"
    },
    "generateKeyCheckValue": {
        "requestCode": "BU",
        "responseCode": "BV",
        "requestPattern": "keyTypeCode:2/string, keyLengthFlag:1/string, key:keyLength/string, delimiter1:delimiter1Length/string, keyType:keyTypeLength/string, delimiter2:delimiter2Length/string, reserved:reservedLength/string, kcvType:kcvTypeLength/string, hashId:hashIdLength/string, hmacKeyLengthBytes:hmacKeyLengthBytesLength/string, hmacKey:hmacKeyLength/string-binhex, delimiter3:delimiter3Length/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, keyCheckValue/binary",
        "customResponseError": {
            "10": "Key parity error"
        }
    },
    "translateKeyLmkLmk": {
        "requestCode": "BW",
        "responseCode": "BX",
        "requestPattern": "keyTypeCode:2/string, keyLengthFlag:1/string, key:33/string, delimiter1:delimiter1Length/string, keyType:keyTypeLength/string, delimiter2:delimiter2Length/string, reserved1:reserved1Length/string, keySchemeLmk:keySchemeLmkLength/string, reserved2:reserved2Length/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, keyTranslated:33/string",
        "customResponseError": {
            "04": "Invalid key type code",
            "05": "Invalid key length flag",
            "10": "Key parity error",
            "44": "Migration not allowed: 'Enforce key type 002 separation for PCI HSM compliance' not set",
            "45": "Invalid key migration destination key type"
        }
    },
    "translatePinTpkZpk": {
        "requestCode": "CA",
        "responseCode": "CB",
        "requestPattern": "sourceTpk:33/string, destinationZpk:33/string, maximumPinLength:2/string-left-zero, sourcePinBlock:16/string, sourcePinBlockFormat:2/string, destinationPinBlockFormat:2/string, pan:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, checkLength:2/string, pinBlock:16/string, pinBlockFormat:2/string",
        "customResponseError": {
            "10": "Source TPK parity error",
            "11": "Destination ZPK parity error"
        }
    },
    "translatePinZpkZpk": {
        "requestCode": "CC",
        "responseCode": "CD",
        "requestPattern": "sourceZpk:33/string, destinationZpk:33/string, maximumPinLength:2/string-left-zero, sourcePinBlock:16/string, sourcePinBlockFormat:2/string, destinationPinBlockFormat:2/string, pan:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, checkLength:2/string, pinBlock:16/string, pinBlockFormat:2/string",
        "customResponseError": {
            "10": "Source ZPK parity error",
            "11": "Destination ZPK parity error"
        }
    },
    "verifyPinGeneratePvv": {
        "requestCode": "CU",
        "responseCode": "CV",
        "requestPattern": "keyType:3/string, key:33/string, pvk:33/string, sourcePinBlock:16/string, sourcePinBlockFormat:2/string, pan:12/string, pvki:1/string, sourcePvv:4/string, destinationPinBlock:16/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pvv:4/string",
        "customResponseError": {
            "01": "PIN Verification failure",
            "10": "PIN Block Key parity error",
            "11": "PVK parity error",
            "27": "PVK not double length",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "generateCvv": {
        "requestCode": "CW",
        "responseCode": "CX",
        "requestPattern": "cvk:33/string, pan:panLength/string, \";\", expirationDate:4/string, serviceCode:3/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, cvv:3/string",
        "customResponseError": {
            "10": "CVK A or CVK B parity error",
            "27": "CVK not double length"
        }
    },
    "verifyCvv": {
        "requestCode": "CY",
        "responseCode": "CZ",
        "requestPattern": "cvk:33/string, cvv:3/string, pan:panLength/string, \";\", expirationDate:4/string, serviceCode:3/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "01": "CVV failed verification",
            "10": "CVK A or B parity error",
            "27": "CVK not double length"
        }
    },
    "verifyTermPinIbm": {
        "requestCode": "DA",
        "responseCode": "DB",
        "requestPattern": "tpk:33/string, pvk:pvkLength/string, maximumPinLength:2/string-left-zero, pinBlock:16/string, pinBlockFormat:2/string, checkLength:2/string-left-zero, pan:12/string, decimalisationTable:16/string, pinValidationData:12/string, offset:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "warnings": ["02"],
        "customResponseError": {
            "01": "PIN Verification failure",
            "10": "TPK parity error",
            "11": "PVK parity error"
        }
    },
    "verifyTermPinPvv": {
        "requestCode": "DC",
        "responseCode": "DD",
        "requestPattern": "tpk:33/string, pvk:pvkLength/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, pvki:1/string, pvv:4/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "01": "PIN verification failure",
            "10": "TPK parity error",
            "11": "PVK parity error",
            "27": "PVK not double length"
        }
    },
    "generateOffsetIbmLmk": {
        "requestCode": "DE",
        "responseCode": "DF",
        "requestPattern": "pvk:pvkLength/string, pin:encryptedPinLength/string, checkLength:2/string-left-zero, account:12/string, decimalisationTable:16/string, pinValidationData:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, offset:12/string",
        "warnings": ["02"],
        "customResponseError": {
            "10": "PVK parity error",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "generatePvvLmk": {
        "requestCode": "DG",
        "responseCode": "DH",
        "requestPattern": "pvk:pvkLength/string, pin:encryptedPinLength/string, account:12/string, pvki:1/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pvv:4/string",
        "customResponseError": {
            "10": "PVK parity error",
            "27": "PVK not double length",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "verifyPinGenerateOffset": {
        "requestCode": "DU",
        "responseCode": "DV",
        "requestPattern": "keyType:3/string, key:33/string, pvk:pvkLength/string, sourcePinBlock:16/string, sourcePinBlockFormat:2/string, checkLength:2/string-left-zero, pan:12/string, decimalisationTable:16/string, pinValidationData:12/string, sourceOffset:12/string, destinationPinBlock:16/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, offset:12/string",
        "warnings": ["02"],
        "customResponseError": {
            "01": "PIN verification failure",
            "10": "PIN Block Key parity error",
            "11": "PVK parity error",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "verifyInterPinIbm": {
        "requestCode": "EA",
        "responseCode": "EB",
        "requestPattern": "zpk:33/string, pvk:pvkLength/string, maximumPinLength:2/string-left-zero, pinBlock:16/string, pinBlockFormat:2/string, checkLength:2/string-left-zero, pan:12/string, decimalisationTable:16/string, pinValidationData:12/string, offset:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "warnings": ["02"],
        "customResponseError": {
            "01": "PIN verification failure",
            "10": "ZPK parity error",
            "11": "PVK parity error"
        }
    },
    "verifyInterPinPvv": {
        "requestCode": "EC",
        "responseCode": "ED",
        "requestPattern": "zpk:33/string, pvk:pvkLength/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, delimiter:delimiterLength/string, verificationPan:verificationPanLength/string, pvki:1/string, pvv:4/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "01": "PIN verification failure",
            "10": "ZPK parity error",
            "11": "PVK parity error",
            "27": "PVK not double length"
        }
    },
    "derivePinIbm": {
        "requestCode": "EE",
        "responseCode": "EF",
        "requestPattern": "pvk:pvkLength/string, offset:12/string, checkLength:2/string-left-zero, account:12/string, decimalisationTable:16/string, pinValidationData:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary",
        "warnings": ["02"],
        "customResponseError": {
            "10": "PVK parity error",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "generateRsaKeyPair": {
        "requestCode": "EI",
        "responseCode": "EJ",
        "_requestPattern": "keyTypeIndicator:1/string, keyLength:4/string, publicKeyEncoding:2/string",
        "requestPattern": "keyTypeIndicator:1/string, \"2048\", \"01\", deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, publicKey:269/string-binhex, privateKeyLength:4/string-left-zero, privateKey:privateKeyLength/string-binhex",
        "customResponseError": {
            "03": "Invalid public key encoding type",
            "04": "Key Length error",
            "05": "Invalid key type",
            "06": "Public exponent length error",
            "08": "Supplied public exponent is even",
            "47": "Algorithm not licensed",
            "48": "Stronger LMK required to protect this size RSA key",
            "68": "Command disabled"
        }
    },
    "generateRsaSignature": {
        "requestCode": "EW",
        "responseCode": "EX",
        "requestPattern": "hashIdentifier:2/string, signatureIdentifier:2/string, padModeIdentifier:2/string, messageDataLength:4/string-left-zero, messageData:messageDataLength/string-binhex, \";\", privateKeyFlag:2/string, privateKeyLength:4/string-left-zero, privateKey:privateKeyLength/string-binhex, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, signatureLength:4/string-left-zero, signature:signatureLength/string-binhex",
        "customResponseError": {
            "03": "Invalid private key type",
            "04": "Invalid private key flag",
            "05": "Invalid hash identifier",
            "06": "Invalid signature identifier",
            "07": "Invalid pad mode identifier",
            "47": "Algorithm not licensed",
            "68": "Command disabled",
            "74": "Invalid digest info syntax (no-hash mode only)",
            "76": "Hash length error",
            "78": "Private key length error",
            "80": "Message length error or a standard error code."
        }
    },
    "translateZekZakLmkZmk": {
        "requestCode": "FM",
        "responseCode": "FN",
        "requestPattern": "flag:1/string, zmk:33/string, zek:zekLength/string, zak:zakLength/string, atallaVariant:atallaVariantLength/string, delimiter:delimiterLength/string, keySchemeZmk:keySchemeZmkLength/string, reserved:reservedLength/string, kcvType:kcvTypeLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, responseData/binary"
    },
    "generatePvv": {
        "requestCode": "FW",
        "responseCode": "FX",
        "requestPattern": "keyType:3/string, key:33/string, pvk:pvkLength/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, pvki:1/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pvv:4/string",
        "customResponseError": {
            "10": "PVK parity error",
            "27": "PVK not double length",
            "81": "PIN length mismatch",
            "86": "PIN exists in either global or local Excluded PIN Table"
        }
    },
    "translatePinBdkBdkZpk": {
        "requestCode": "G0",
        "responseCode": "G1",
        "requestPattern": "sourceKeyFlag:sourceKeyFlagLength/string, sourceKey:33/string, destinationKeyFlag:destinationKeyFlagLength/string, destinationKey:33/string, sourceKsnDescriptor:3/string, sourceKsn:sourceKsnLength/string, destinationKsnDescriptor:destinationKsnDescriptorLength/string, destinationKsn:destinationKsnLength/string, sourcePinBlock:16/string, sourcePinBlockFormat:2/string, destinationPinBlockFormat:2/string, pan:12/string, destinationPanDelimiter:destinationPanDelimiterLength/string, destinationPan:destinationPanLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, checkLength:2/string, pinBlock:16/string, pinBlockFormat:2/string",
        "customResponseError": {
            "10": "BDK parity error",
            "11": "Interchange key parity error",
            "27": "BDK not double or triple length"
        }
    },
    "hashDataBlock": {
        "requestCode": "GM",
        "responseCode": "GN",
        "requestPattern": "hashId:2/string, messageDataLength:5/string-left-zero, messageData:messageDataLength/string-binhex",
        "responsePattern": "errorCode:2/string, hash/binary",
        "customResponseError": {
            "05": "Invalid hash identifier"
        }
    },
    "verifyOffsetIbmDukpt": {
        "requestCode": "GO",
        "responseCode": "GP",
        "requestPattern": "mode:1/string, macMode:macModeLength/string, macMethod:macMethodLength/string, bdk:33/string, pvk:pvkLength/string, ksnDescriptor:3/string, ksn:ksnLength/string, pinBlock:16/string, pinBlockFormat:2/string, checkLength:2/string-left-zero, pan:12/string, decimalisationTable:16/string, pinValidationData:12/string, offset:12/string, mac:macLength/string, messageDataLengthBytes:messageDataLengthBytesLength/string-left-zero, messageData:messageDataLength/string-binhex, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "warnings": ["02"],
        "customResponseError": {
            "01": "PIN Verification failure",
            "10": "BDK parity error",
            "11": "PVK error",
            "27": "BDK not double length"
        }
    },
    "verifyPvvDukpt": {
        "requestCode": "GQ",
        "responseCode": "GR",
        "requestPattern": "mode:1/string, macMode:macModeLength/string, macMethod:macMethodLength/string, bdk:33/string, pvk:pvkLength/string, ksnDescriptor:3/string, ksn:ksnLength/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, delimiter:delimiterLength/string, verificationPan:verificationPanLength/string, pvki:1/string, pvv:4/string, mac:macLength/string, messageDataLengthBytes:messageDataLengthBytesLength/string-left-zero, messageData:messageDataLength/string-binhex, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "01": "PIN Verification failure",
            "10": "BDK parity error",
            "11": "PVK error",
            "27": "BDK not double or triple length"
        }
    },
    "generateVerifyMacDukpt": {
        "requestCode": "GW",
        "responseCode": "GX",
        "requestPattern": "macMode:1/string, macMethod:1/string, bdk:33/string, ksnDescriptor:3/string, ksn:ksnLength/string, mac:macLength/string, messageDataLengthBytes:4/string-left-zero, messageData:messageDataLengthBytes/string-binhex, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "01": "MAC Verification Failure"
        }
    },
    "generateRandomPin": {
        "requestCode": "JA",
        "responseCode": "JB",
        "requestPattern": "account:12/string, checkLength:2/string-left-zero, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary",
        "customResponseError": {
            "81": "PIN length mismatch"
        }
    },
    "translatePinTpkLmk": {
        "requestCode": "JC",
        "responseCode": "JD",
        "requestPattern": "tpk:33/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary",
        "customResponseError": {
            "10": "TPK parity error"
        }
    },
    "translatePinZpkLmk": {
        "requestCode": "JE",
        "responseCode": "JF",
        "requestPattern": "zpk:33/string, pinBlock:16/string, pinBlockFormat:2/string, pan:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary",
        "customResponseError": {
            "10": "ZPK parity error"
        }
    },
    "translatePinLmkZpk": {
        "requestCode": "JG",
        "responseCode": "JH",
        "requestPattern": "zpk:33/string, pinBlockFormat:2/string, pan:12/string, delimiter:delimiterLength/string, pin:pinLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pinBlock:16/string",
        "customResponseError": {
            "11": "ZPK parity error"
        }
    },
    "generateArqc3": {
        "requestCode": "KQ",
        "responseCode": "KR",
        "requestPattern": "modeFlag:1/string, schemeId:1/string, mkac:33/string, mksmi:mksmiLength/string, panSeqNo:8/string-binhex, atc:2/string-binhex, unpredictableNumber:4/string-binhex, transactionDataLengthHex:transactionDataLengthLength/string, transactionData:transactionDataLengthDec/string-binhex, delimiter:delimiterLength/string, arqc:8/string-binhex, arc:arcLength/string-binhex, discretionaryDataMac:discretionaryDataMacLength/string-binhex, discretionaryDataBytes:discretionaryDataBytesLength/string, discretionaryData:discretionaryDataLength/string-binhex, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, arpc/binary",
        "errorPattern": "errorCode:2/string, diagnosticData:8/string-binhex",
        "customResponseError": {
            "01": "ARQC/TC/AAC verification failed",
            "03": "Mode = 3 or 4 but Scheme ID ≠ 0",
            "04": "Invalid Mode value",
            "05": "Unrecognized Scheme ID",
            "06": "Discretionary MAC verification failed",
            "10": "MK-AC parity error",
            "11": "MK-SMI parity error",
            "80": "Transaction Data length error",
            "81": "Zero length Transaction Data",
            "82": "Invalid Discretionary MAC Data length"
        }
    },
    "generateArqc4": {
        "requestCode": "KW",
        "responseCode": "KX",
        "requestPattern": "modeFlag:1/string, schemeId:1/string, mkac:33/string, ivac:ivacLength/string-binhex, panLength:panSeqNoLengthLength/string-left-zero, panSeqNo:panSeqNoLength/string-binhex, delimiter1:delimiter1Length/string, branchHeightParams:branchHeightParamsLength/string, atc:2/string-binhex, transactionDataLengthHex:transactionDataLengthLength/string, transactionData:transactionDataLengthDec/string-binhex, delimiter2:delimiter2Length/string, arqc:8/string-binhex, arc:arcLength/string-binhex, csu:csuLength/string-binhex, padLength:padLengthLength/string, pad:padLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, arpc/binary",
        "errorPattern": "errorCode:2/string, diagnosticData:8/string-binhex",
        "customResponseError": {
            "01": "ARQC/TC/AAC/MPVV verification failure",
            "04": "Unrecognized Mode Flag",
            "05": "Unrecognized Scheme ID",
            "06": "Invalid YHHHHCC value",
            "10": "MK parity error",
            "52": "Invalid Branch/Height"
        }
    },
    "translateDtab": {
        "requestCode": "LO",
        "responseCode": "LP",
        "requestPattern": "decimalisationTable:16/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, decimalisationTableTranslated:16/string"
    },
    "encryptDataBlock": {
        "requestCode": "M0",
        "responseCode": "M1",
        "requestPattern": "modeFlag:2/string, inputFormatFlag:1/string, outputFormatFlag:1/string, keyType:3/string, key:33/string, ksnDescriptor:ksnDescriptorLength/string, ksn:ksnLength/string, iv:ivLength/string, messageDataLengthHex:4/string-left-zero, messageData:messageDataLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "02": "Invalid Mode Flag field",
            "03": "Invalid Input Format Flag field",
            "04": "Invalid Output Format Flag field",
            "05": "Invalid Key Type field",
            "06": "Invalid Message Length field",
            "10": "Encryption Key Parity Error",
            "35": "Illegal Message Format"
        }
    },
    "decryptDataBlock": {
        "requestCode": "M2",
        "responseCode": "M3",
        "requestPattern": "modeFlag:2/string, bpsRadixFlag:bpsRadixFlagLength/string, bpsRadixValue:bpsRadixValueLength/string, bpsTweak:bpsTweakLength/string-binhex, inputFormatFlag:1/string, outputFormatFlag:1/string, keyType:3/string, key:33/string, ksnDescriptor:ksnDescriptorLength/string, ksn:ksnLength/string, iv:ivLength/string, messageDataLengthHex:4/string-left-zero, messageData:messageDataLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "02": "Invalid Mode Flag field",
            "03": "Invalid Input Format Flag field",
            "04": "Invalid Output Format Flag field",
            "05": "Invalid Key Type field",
            "06": "Invalid Message Length field",
            "10": "Decryption Key Parity Error",
            "35": "Illegal Message Format"
        }
    },
    "translateDataBlock": {
        "requestCode": "M4",
        "responseCode": "M5",
        "requestPattern": "sourceModeFlag:2/string, destinationModeFlag:2/string, inputFormatFlag:1/string, outputFormatFlag:1/string, sourceKeyType:3/string, sourceKey:33/string, sourceKsnDescriptor:sourceKsnDescriptorLength/string, sourceKsn:sourceKsnLength/string, destinationKeyType:3/string, destinationKey:33/string, destinationKsnDescriptor:destinationKsnDescriptorLength/string, destinationKsn:destinationKsnLength/string, sourceIv:sourceIvLength/string, destinationIv:destinationIvLength/string, messageDataLengthHex:4/string-left-zero, messageData:messageDataLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "02": "Invalid Mode Flag field",
            "03": "Invalid Input Format Flag field",
            "04": "Invalid Output Format Flag field",
            "05": "Invalid Key Type field",
            "06": "Actual Message Length is too Short",
            "07": "Invalid Destination Mode Flag Field",
            "08": "Invalid destination Key Type Field",
            "10": "Decryption Key Parity Error",
            "11": "Encryption Key Parity Error",
            "15": "Actual Message Length is too Long",
            "35": "Illegal Message Format"
        }
    },
    "generateMac": {
        "requestCode": "M6",
        "responseCode": "M7",
        "requestPattern": "modeFlag:1/string, inputFormatFlag:1/string, macSize:1/string, macAlgorithm:1/string, paddingMethod:1/string, keyType:3/string, key:33/string, iv:ivLength/string, macDataLengthHex:4/string-left-zero, macData:macDataLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "02": "Invalid Mode Flag field",
            "03": "Invalid Input Format Flag field",
            "04": "Invalid MAC Algorithm field",
            "05": "Invalid Key Type field",
            "06": "Invalid Message Length field",
            "09": "Invalid Padding Method field",
            "10": "MAC Key Parity Error"
        }
    },
    "verifyMac": {
        "requestCode": "M8",
        "responseCode": "M9",
        "requestPattern": "modeFlag:1/string, inputFormatFlag:1/string, macSize:1/string, macAlgorithm:1/string, paddingMethod:1/string, keyType:3/string, key:33/string, macDataLengthHex:4/string-left-zero, macData:macDataLength/string, mac:macLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, rest/binary",
        "customResponseError": {
            "01": "MAC verification failed",
            "02": "Invalid Mode Flag field",
            "03": "Invalid Input Format Flag field",
            "04": "Invalid MAC Algorithm field",
            "05": "Invalid Key Type field",
            "06": "Invalid Message Length field",
            "09": "Invalid Padding Method field",
            "10": "MAC Key Parity Error"
        }
    },
    "printFormat": {
        "requestCode": "PA",
        "responseCode": "PB",
        "requestPattern": "data:dataLength/string",
        "responsePattern": "errorCode:2/string"
    },
    "printPin": {
        "requestCode": "PE",
        "responseCode": "PF",
        "requestPattern": "documentType:1/string, account:12/string, pin:encryptedPinLength/string, printFields:printFieldsLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, checkValue/binary"
    },
    "printPinEnd": {
        "responseCode": "PZ",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "16": "Printer not ready/disconnected",
            "41": "Internal hardware/software error"
        }
    },
    "translateAccountNumber": {
        "requestCode": "QK",
        "responseCode": "QL",
        "requestPattern": "pin:pinLength/string, oldAccountNumber:12/string, newAccountNumber:12/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string, pin/binary"
    },
    "printTmkMailer": {
        "requestCode": "TA",
        "responseCode": "TB",
        "requestPattern": "tmk:33/string, printFields:printFieldsLength/string, deliminaterLmk:deliminaterLmkLen/string, lmkIdentifier:lmkIdentifierLen/string",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "10": "TMK parity error"
        }
    },
    "printTmkMailerEnd": {
        "responseCode": "TZ",
        "responsePattern": "errorCode:2/string",
        "customResponseError": {
            "16": "Printer time out"
        }
    }
}
